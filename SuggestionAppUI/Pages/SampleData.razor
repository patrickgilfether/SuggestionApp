@* Razor page setting up starter category data.
*@

@*markup tags*@
@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

@*HTML*@
<h3>Sample Data</h3>
@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick=" CreateCategories"> Create Categories</button>
}


@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick=" CreateStatuses"> Create Statuses</button>
}


@if (sampleDataCreated)
{
    <h4>Sample Datas has been created</h4>
}
else
{
<button class="btn btn-danger" @onclick=" GenerateSampleData"> Generate Sample Data</button>
}

@*code block containing c# code*@
@code {
    bool categoriesCreated = false;
    bool statusesCreated = false;
    bool sampleDataCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
        {
            FirstName = "Patrick",
            LastName = "Gilfether",
            EmailAddress = "pat@test.com",
            DisplayName = "Test Pat",
            ObjectIdentifier = "abc-12345"
        };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-12345");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");


        SuggestionModel suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[0],
            Suggestion = "Our First Suggestion",
            Description = "This is a suggestion created by the Sample Data Generation method"
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[1],
            Suggestion = "Our Second Suggestion",
            Description = "This is a suggestion created by the Sample Data Generation method",
            SuggestionStatus = statuses[0],
            OwnerNotes = "This is the note for the status."
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[2],
            Suggestion = "Our Third Suggestion",
            Description = "This is a suggestion created by the Sample Data Generation method",
            SuggestionStatus = statuses[1],
            OwnerNotes = "This is the note for the status."
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[3],
            Suggestion = "Our Fourth Suggestion",
            Description = "This is a suggestion created by the Sample Data Generation method",
            SuggestionStatus = statuses[2],
            OwnerNotes = "This is the note for the status.",
            UserVotes = votes
        };
        await suggestionData.CreateSuggestion(suggestion);


        votes.Add("4");

        suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[4],
            Suggestion = "Our Fifth Suggestion",
            Description = "This is a suggestion created by the Sample Data Generation method",
            SuggestionStatus = statuses[3],
            OwnerNotes = "This is the note for the status.",
            UserVotes = votes

        };
        await suggestionData.CreateSuggestion(suggestion);
        sampleDataCreated = true;
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }
        //else
        CategoryModel cat = new()
        {
            CategoryName = "Courses",
            CategoryDescription = "Full paid courses."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Dev Questions",
            CategoryDescription = "Advice on being a developer."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "In-Depth Tutorial",
            CategoryDescription = "A deep-dive video on how to use a topic."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "10-Minute Training",
            CategoryDescription = "A quick \"How do I use this?\" video"
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Other",
            CategoryDescription = "Not sure which category this fits in."
        };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }
    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
        {
            StatusName = "Completed",
            StatusDescription = "The suggestion was accepted and the corresponding item wad created"
        };
        await statusData.CreateStatuses(stat);

        stat = new()
        {
            StatusName = "Watching",
            StatusDescription = "The suggestion is interesting. We are monitoring to see how much interest it generates"
        };
        await statusData.CreateStatuses(stat);

        stat = new()
        {
            StatusName = "Upcoming",
            StatusDescription = "The suggestion was accepted and will be released soon"
        };
        await statusData.CreateStatuses(stat);


        stat = new()
        {
            StatusName = "Dismissed",
            StatusDescription = "The suggestion is not something we are going to undertake."
        };
        await statusData.CreateStatuses(stat);
        statusesCreated = true;

        //paused lesson 12 @13:16
        //https://youtu.be/CkrjYJkH_lg?t=796
    }
}

